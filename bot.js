const Discord = require('discord.js'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É discord.js
const { Collection } = Discord;

const GatewayIntentBits = require('discord.js');
const fs = require('fs'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ–¥–Ω–æ–π –º–æ–¥—É–ª—å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã node.js  
const { EmbedBuilder } = require('@discordjs/builders');
require("dotenv").config();
// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const token = process.env.TOKEN;
const prefix = process.env.COMMAND_PREFIX;
const clientId = process.env.CLIENT_ID;
const guildId = process.env.GUILD_ID;
const path = require('path');
const { REST } = require("@discordjs/rest");
const { Routes } = require("discord-api-types/v10");
const { setTimeout } = require('timers/promises');
//–¥–ª—è –Ω–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¢–û–õ–¨–ö–û const { SlashCommandBuilder } = require('@discordjs/builders')


if (!token) {
  console.error('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!');
  process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
const client = new Discord.Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers,
  ],
  allowedMentions: { parse: [] }
});

client.commands = new Collection();



// 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π
client.commands = new Collection();
client.cooldowns = new Collection(); // –í—ã–Ω–æ—Å–∏–º cooldowns –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –∫–ª–∏–µ–Ω—Ç–∞

// 2. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥
const commands = [];
const commandsPath = path.join(__dirname, 'commands');
const commandFolders = fs.readdirSync(commandsPath);

for (const folder of commandFolders) {
  if (folder.startsWith('_')) continue;

  const folderPath = path.join(commandsPath, folder);
  if (!fs.statSync(folderPath).isDirectory()) continue;

  const commandFiles = fs.readdirSync(folderPath)
    .filter(file => file.endsWith('.js'));

  for (const file of commandFiles) {
    const filePath = path.join(folderPath, file);
    const command = require(filePath);
    
    if ('data' in command && 'execute' in command) {
      // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è cooldown –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
      if (command.cooldown && !client.cooldowns.has(command.data.name)) {
        client.cooldowns.set(command.data.name, new Collection());
      }
      
      commands.push(command.data.toJSON());
      client.commands.set(command.data.name, command);      
    }
  }
}

//–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∞–Ω–¥
client.on('interactionCreate', i => console.log(i));

// 8. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
client.once('ready', async () => {
  console.log(`‚úÖ –ë–æ—Ç ${client.user.tag} –∑–∞–ø—É—â–µ–Ω!`);
  
  try {
    const rest = new REST({ version: '10' }).setToken(token);
    
    if (commands.length === 0) {
      console.error('‚ùå –ù–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!');
      return;
    }

    console.log('–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã:', commands);

    if (process.env.ENV === 'production') {
      await rest.put(Routes.applicationCommands(clientId), { body: commands });
      console.log('üîß –ö–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω–æ');
    } else {
      await rest.put(Routes.applicationGuildCommands(clientId, guildId), { body: commands });
      console.log('üîß –ö–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:', error);
  }
});
// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç (3 —Å–µ–∫—É–Ω–¥—ã)
const RESPONSE_TIMEOUT = 3000;
client.on('interactionCreate', async interaction => {
  if (!interaction.isChatInputCommand()) return;

  const timeout = setTimeout(async () => {
    if (!interaction.replied && !interaction.deferred) {
      await interaction.reply({
        embeds: [new EmbedBuilder()
          .setColor(0xFF0000)
          .setTitle('‚è≥ –ò–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...')
        ],
        ephemeral: true
      });
    }
  }, RESPONSE_TIMEOUT);

  try {
    await interaction.deferReply();
    const command = client.commands.get(interaction.commandName);
    
    if (!command) {
      await interaction.editReply('‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown
    if (client.cooldowns.has(interaction.commandName)) {
      const cooldown = client.cooldowns.get(interaction.commandName);
      const userCooldown = cooldown.get(interaction.user.id);
      
      if (userCooldown && Date.now() < userCooldown) {
        const remaining = (userCooldown - Date.now()) / 1000;
        return await interaction.editReply(
          `‚åõ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${remaining.toFixed(1)} —Å–µ–∫.`
        );
      }
      
      cooldown.set(interaction.user.id, Date.now() + (command.cooldown || 3000));
    }

    const start = Date.now();
    await command.execute(interaction);
    console.log(`–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ ${Date.now() - start}–º—Å`);

  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –≤ ${interaction.commandName}:`, error);
    const errorMsg = process.env.NODE_ENV === 'development' 
      ? `‚ùå ${error.message}` 
      : '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã';
    
    if (interaction.deferred || interaction.replied) {
      await interaction.editReply(errorMsg);
    } else {
      await interaction.reply({ content: errorMsg, ephemeral: true });
    }
  } finally {
    clearTimeout(timeout);
  }
});

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ messageCreate
client.on('messageCreate', async message => {
  if (message.author.bot || !message.content.startsWith(prefix)) return;

  const args = message.content.slice(prefix.length).trim().split(/ +/);
  const commandName = args.shift()?.toLowerCase();
  
  const command = client.commands.get(commandName) || 
    client.commands.find(cmd => cmd.aliases?.includes(commandName));

  if (!command) return message.react('‚ùì');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
  if (command.permissions) {
    const missing = message.member?.permissions.missing(command.permissions) || [];
    if (missing.length > 0) {
      return message.reply({
        content: `‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞: ${missing.join(', ')}`,
        allowedMentions: { repliedUser: false }
      });
    }
  }

  // Cooldown
  if (command.cooldown) {
    const cooldowns = client.cooldowns.get(command.name) || new Collection();
    const now = Date.now();
    
    if (cooldowns.has(message.author.id)) {
      const remaining = (cooldowns.get(message.author.id) - now) / 1000;
      if (remaining > 0) {
        return message.reply({
          content: `‚åõ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${remaining.toFixed(1)} —Å–µ–∫.`,
          allowedMentions: { repliedUser: false }
        });
      }
    }
    
    cooldowns.set(message.author.id, now + command.cooldown * 1000);
    client.cooldowns.set(command.name, cooldowns);
  }

  try {
    const start = Date.now();
    await command.execute(message, args);
    console.log(`–ü—Ä–µ—Ñ–∏–∫—Å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ ${Date.now() - start}–º—Å`);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –≤ ${commandName}:`, error);
    await message.reply({
      content: '‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
      allowedMentions: { repliedUser: false }
    });
  }
});

client.on('messageCreate', async message => {
  if (message.author.bot || !message.content.startsWith(prefix)) return;

  const args = message.content.slice(prefix.length).trim().split(/ +/);
  const commandName = args.shift()?.toLowerCase();
  
  // Debug: –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É
  console.log(`[DEBUG] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: ${commandName}`, { 
    args, 
    author: message.author.tag 
  });

  // –ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å —É—á–µ—Ç–æ–º –∞–ª–∏–∞—Å–æ–≤
  const command = client.commands.get(commandName) || 
    client.commands.find(cmd => cmd.aliases?.includes(commandName));

  if (!command) {
    console.log(`[DEBUG] –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${commandName}`);
    return message.react('‚ùì');
  }

  // Debug: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
  console.log(`[DEBUG] –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞:`, {
    name: command.data?.name || command.name,
    cooldown: command.cooldown || 'none'
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown
  if (command.cooldown) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é cooldowns –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!client.cooldowns.has(command.data.name)) {
      client.cooldowns.set(command.data.name, new Collection());
      console.log(`[DEBUG] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω cooldown –¥–ª—è ${command.data.name}`);
    }

    const cooldowns = client.cooldowns.get(command.data.name);
    const now = Date.now();
    
    if (cooldowns.has(message.author.id)) {
      const remaining = (cooldowns.get(message.author.id) - now) / 1000;
      if (remaining > 0) {
        console.log(`[DEBUG] Cooldown –¥–ª—è ${message.author.tag}: ${remaining.toFixed(1)}s`);
        return message.reply({
          content: `‚åõ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${remaining.toFixed(1)} —Å–µ–∫.`,
          allowedMentions: { repliedUser: false }
        });
      }
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cooldown
    cooldowns.set(message.author.id, now + command.cooldown * 1000);
    console.log(`[DEBUG] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω cooldown –¥–ª—è ${message.author.tag}`);

    // –û—á–∏—Å—Ç–∫–∞ cooldown —á–µ—Ä–µ–∑ —Ç–∞–π–º–µ—Ä
    setTimeout(() => {
      cooldowns.delete(message.author.id);
      console.log(`[DEBUG] –û—á–∏—â–µ–Ω cooldown –¥–ª—è ${message.author.tag}`);
    }, command.cooldown * 1000);
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  try {
    console.log(`[DEBUG] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã ${commandName}...`);
    
    if (!command.execute) {
      throw new Error('–ú–µ—Ç–æ–¥ execute –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    const startTime = Date.now();
    await command.execute(message, args);
    const execTime = Date.now() - startTime;
    
    console.log(`[DEBUG] –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ ${execTime}–º—Å`);
    
  } catch (error) {
    console.error(`[ERROR] –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ${commandName}:`, error.stack);
    
    const errorMessage = process.env.NODE_ENV === 'development'
      ? `‚ùå –û—à–∏–±–∫–∞: ${error.message}\n\`\`\`${error.stack}\`\`\``
      : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã';
    
    await message.reply({
      content: errorMessage,
      allowedMentions: { repliedUser: false }
    });
  }
});
client.on('debug', console.log);
client.on('warn', console.warn);
client.login(token).catch(console.error);