const Discord = require('discord.js'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É discord.js

require("dotenv").config();
const GatewayIntentBits = require('discord.js');
 // –û–±—ä—è–≤–ª—è–µ–º, —á—Ç–æ client - –±–æ—Ç
const comms = require("./comms.js"); // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è –±–æ—Ç–∞
const fs = require('fs'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ–¥–Ω–æ–π –º–æ–¥—É–ª—å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã node.js  


const { REST } = require("@discordjs/rest");
const { Routes } = require("discord-api-types/v10");


const { Collection } = Discord;

const path = require('path');


// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const token = process.env.TOKEN;
const prefix = process.env.COMMAND_PREFIX;
const clientId = process.env.CLIENT_ID;
const guildId = process.env.GUILD_ID;

if (!token) {
  console.error('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!');
  process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
const client = new Discord.Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers,
  ]
});

client.commands = new Collection();

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥
const commands = [];
const commandsPath = path.join(__dirname, 'commands');
const commandFolders = fs.readdirSync(commandsPath);

for (const folder of commandFolders) {
  if (folder.startsWith('_')) continue;
  
  const folderPath = path.join(commandsPath, folder);
  if (!fs.statSync(folderPath).isDirectory()) continue;

  const commandFiles = fs.readdirSync(folderPath)
    .filter(file => file.endsWith('.js'));

  for (const file of commandFiles) {
    const filePath = path.join(folderPath, file);
    const command = require(filePath);
    
    if ('data' in command && 'execute' in command) {
      commands.push(command.data.toJSON());
      client.commands.set(command.data.name, command);
    }
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
client.once('ready', async () => {
  console.log(`‚úÖ –ë–æ—Ç ${client.user.tag} –∑–∞–ø—É—â–µ–Ω!`);
  
  try {
    const rest = new REST({ version: '10' }).setToken(token);
    
    if (process.env.ENV === 'production') {
      await rest.put(
        Routes.applicationCommands(clientId),
        { body: commands }
      );
      console.log('üîß –ö–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω–æ');
    } else {
      await rest.put(
        Routes.applicationGuildCommands(clientId, guildId),
        { body: commands }
      );
      console.log('üîß –ö–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:', error);
  }
});
//–æ–±—Ä–∞–±–æ—Ç–∫–∞ Slash-–∫–æ–º–º–∞–Ω–¥
client.on('interactionCreate', async interaction => {
  if (!interaction.isCommand()) return;

  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ë–æ—Ç –¥—É–º–∞–µ—Ç..." –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
  await interaction.deferReply({ ephemeral: true }); 
  // ephemeral: true - —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

  try {
    const command = client.commands.get(interaction.commandName);
    if (!command) throw new Error('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

    await command.execute(interaction);
    
  } catch (error) {
    await interaction.editReply('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã');
    console.error(error);
  }
});


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã)
client.on('messageCreate', message => {
  if (!message.content.startsWith(prefix) || message.author.bot) return;
  
  const args = message.content.slice(prefix.length).trim().split(/ +/);
  const commandName = args.shift().toLowerCase();
  
  const command = client.commands.get(commandName);
  if (!command) return;

  try {
    command.execute(message, args);
  } catch (error) {
    console.error(error);
    message.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã!');
  }
});

// –¢–æ–ª—å–∫–æ –û–î–ò–ù –≤—ã–∑–æ–≤ login –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞
client.login(token).catch(console.error);